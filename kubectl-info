kubectl cluster-info
kubectl get all
kubectl get nodes
kubectl describe node node1
kubectl get ns
kubectl -n kube-system get all
kubectl -n kube-system get pod

kubectl drain node4 - delete all pods
kubectl delete node node4 - delete node

kubectl -n kubernetes-dashboard port-forward svc/kubernetes-dashboard-kong-proxy 8443:443
kubectl proxy

kubectl delete namespace kubernetes-dashboard

kubectl -n kube-system get deployment.apps/kubernetes-dashboard -o yaml

kubectl apply -f dashboard.yaml
kubectl delete -d dashboard.yaml

kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml

-------------------------------PODS------------------------------------------
kubectl run nginx --image nginx
kubectl run redis --image=redis --labels="app=redis"
kubectl run httpd --image=httpd:alpine --port=80 --expose
kubectl get pods
kubectl get pod -o yaml
kubectl get pods -o wide - подробности
kubectl get pods --all-namespaces
kubectl get pods -A
kubectl describe pod podname
kubectl delete pod podname

-------------------------------REPLICASET------------------------------------
kubectl create -f replicaset.yaml
kubectl get replicaset
kubectl get replicationcontroller
kubectl edit replicaset new-replica-set
kubectl delete replicaset replicasetname
kubectl replace -f replicaset.yaml - через файл обновить репликасет, увеличив кол-во реплик
kubectl scale --replicas=6 -f replicaset.yaml - через команду
kubectl scale rs new-replica-set --replicas=5

-------------------------------DEPLOYMENT------------------------------------
kubectl create deployment nginx --image=nginx
kubectl create -f deployment.yaml
kubectl create deployment webapp --image=rotorocloud/simple-webapp-rockets --replicas=3
kubectl create deployment redis-deploy -n=dev-ns --image=redis --replicas=2
kubectl get deployments

kubectl apply -f deployment.yaml
kubectl edit deployment name
kubectl set image deployment/name nginx=nginx:1.71

kubectl rollout status deployment/name
kubectl rollout history deployment/name

kubectl rollout undo deployment/name - откатить изменения

Стратегии деплоймента
Recreate - сначала удаляет, потом создаёт
RollingUpdate - удаляет один экземпляр старой версии и добавляет новый и так постепенно все.

-------------------------------SERVICE------------------------------------
Внутренняя сеть подов 10.224.0.0
Все контейнеры/поды должны связываться друг с другом без NAT
Все ноды связываются с любыми контейнерами без NAT

kubectl get service
kubectl expose pod redis --port=6379 --name redis-service

-------------------------------NAMESPACE----------------------------------
В одном пространстве
mysql.connect("db-service")

В пространство имён dev
mysql.connect("db-service.dev.svc.cluster.local")

kubectl get pods - вывод подов из неймспейса default
kubectl get pods --namespace=kube-system - вывод подов из неймспейса kube-system

kubectl create -f pod.yaml --namespace=dev

kubectl create namespace dev
kubectl create -f Namespace.yaml

Переключение Namespace по умолчанию
kubectl config set-context $(kubectl config current-context) --namespace=dev

Чтобы ограничить ресурсы в неймспейсе, необходимо создать Resource Quota
kubectl create -f ResourceQuota.yaml

-------------------------------CONFIGMAP----------------------------------
kubectl get configmaps
kubectl create configmap app-name-configmap \
--from-literal=key=value\
--from-literal=key=value\
--from-literal=key=value\

kubectl create configmap app-name-configmap --from-env-file=/path/to/file

-------------------------------SECRET-------------------------------------
kubectl create secret generic db-secret \
 --from-literal=DB_Host=sql01 \
 --from-literal=DB_User=root \
 --from-literal=DB_Password=password123

kubectl create secret generic secret-name --from-env-file=/path/to/file
kubectl create secret generic ssh-key-secret --from-file=ssh-privatekey=/root/.ssh/id_rsa

echo -n 'string' | base64
kubectl apply -f secret.yaml

kubectl get secrets
kubectl get secret name -o yaml

-------------------------------SERVICE_ACCOUNT----------------------------
kubectl create serviceaccount dashboard-account
Когда создаётся сервис аккаут сначала создаётся объект SA, а затем генерируется токен SA,
после создаётся сикрет, внутри которого и будет токен. Сикрет связывается с созданным SA.

kubectl get serviceaccount
kubectl describe serviceaccount
kubectl describe secret

-------------------------------TAINT_TOLERATION----------------------------
kubectl taint nodes node-name key=value:taint-effect
taint-effect - NoSchedule PreferNoSchedule NoExecute

kubectl taint nodes node01 app=green:NoSchedule
kubectl describe node controlplane | grep Taint

Убрать taints
kubectl taint nodes controlplane node-role.kubernetes.io/control-plane:NoSchedule-

-----------------NODE-SELECTOR NODE-AFFINITY------------------------------
kubectl labels nodes node-name label-key=label-value
